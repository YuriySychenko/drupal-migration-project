<?php

/**
 * @file
 * Functions to support theming in the Tailwind CSS theme.
 */

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Form\FormState;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use Drupal\views\Views;

/**
 * Implements hook_preprocess_HOOK().
 */
function day_theme_preprocess_block(&$variables) {
  if (day_theme_get_active_theme() == 'day_theme' && $variables['base_plugin_id'] == 'system_branding_block') {
    $variables['site_logo'] = '';
    if ($variables['content']['site_logo']['#access'] && $variables['content']['site_logo']['#uri']) {
      $variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
    }
  }
}


/**
 * Get the active theme.
 *
 * @return string
 *   The name of the active theme.
 */
function day_theme_get_active_theme() {
  return \Drupal::service('theme.manager')->getActiveTheme()->getName();
}

/**
 * Implement hook_preprocess_page.
 */
function day_theme_preprocess_page(&$variables) {
  // Get node.
  $node = $variables['node'] ?? NULL;
  // Route name.
  $route_name = \Drupal::routeMatch()->getRouteName();
  // Current path.
  $current_path = \Drupal::service('path.current')->getPath();
  // Alias manager.
  $alias_manager = \Drupal::service('path_alias.manager');
  // Path alias repository.
  $path_alias_repository = \Drupal::service('path_alias.repository');
  // Get language manager.
  $language_manager = \Drupal::languageManager();
  // Get langcode.
  $langcode = $language_manager->getCurrentLanguage()->getId();
  // Format url langcode variable.
  $url_langcode = $langcode == 'uk' ? '' : '/' . $langcode;

  /** @var Drupal\taxonomy\TermStorageInterface $taxonomy_storage */
  $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  /** @var Drupal\node\NodeStorageInterface $node_storage */
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  // Add base_url to templates.
  $variables['base_url'] = $GLOBALS['base_url'];

  // Add current path to templates.
  $variables['current_path'] = $route_name != 'system.404' ? $alias_manager->getAliasByPath($current_path) : '';

  // Add site name to templates.
  $variables['site_name'] = \Drupal::config('system.site')->get('name');

  // Add current langcode to templates.
  $variables['language'] = $langcode;

  // Add current language links to templates.
  $languages = $language_manager->getLanguages();

  // Delete EN language.
  unset($languages['en']);

  foreach ($languages as $language) {
    // Get is front page boolean value.
    $is_front = $variables['is_front'];

    // Taxonomy term translation path.
    // $current_path_args = explode('/', $current_path);
    // if ($current_path_args[1] == 'taxonomy' && $current_path_args[2] == 'term') {
    //   $path_alias_repository->lookupBySystemPath('/taxonomy/term/' . $current_path_args[3], $language->getId())
    // }

    // Get the current URL in each language.
    $url = Url::fromRoute('<current>')->setOption('language', $language)->toString();
    $alias_url = $alias_manager->getAliasByPath($url);
    $language_code = $language->getId() != 'uk' ? $language->getId() : '';

    $variables['custom_lang_switcher'][$language->getId()] = !$is_front ? $alias_url : '/' . $language_code;
  }

  // Add taxonomy terms by tags vocabulary.
  $tags_terms_ids = $taxonomy_storage->getQuery()
    ->condition('vid', 'tags')
    ->condition('field_hot_theme', 1)
    ->sort('weight', 'ASC')
    ->execute();

  $tags_terms = $taxonomy_storage->loadMultiple($tags_terms_ids);

  $hot_tags = [];
  /** @var Drupal\taxonomy\Entity\Term $tags_term */
  foreach ($tags_terms as $tags_term) {
    /** @var Drupal\taxonomy\Entity\Term $translated_tags_term */
    $translated_tags_term = \Drupal::service('entity.repository')
      ->getTranslationFromContext($tags_term, $langcode);
    $tags_term_alias = $alias_manager->getAliasByPath('/taxonomy/term/' . $translated_tags_term->id());

    $hot_tags[$translated_tags_term->id()]['name'] = $translated_tags_term->getName();
    $hot_tags[$translated_tags_term->id()]['alias'] = $url_langcode . $tags_term_alias;

    // Format active tag.
    $current_path_alias = $alias_manager->getAliasByPath($current_path);
    $hot_tags[$translated_tags_term->id()]['active'] = $current_path_alias == $tags_term_alias ? 'active' : '';
  }

  $variables['hot_tags'] = $hot_tags;

  // Add taxonomy terms by video tags vocabulary.
  $video_tags_terms_ids = $taxonomy_storage->getQuery()
    ->condition('vid', 'video_tags')
    ->sort('weight', 'ASC')
    ->execute();

  $video_tags_terms = $taxonomy_storage->loadMultiple($video_tags_terms_ids);

  $video_tags = [];
  /** @var Drupal\taxonomy\Entity\Term $video_tags_term */
  foreach ($video_tags_terms as $video_tags_term) {
    /** @var Drupal\taxonomy\Entity\Term $translated_video_tags_term */
    $translated_video_tags_term = \Drupal::service('entity.repository')
      ->getTranslationFromContext($video_tags_term, $langcode);

    $video_tags[$translated_video_tags_term->id()]['name'] = $translated_video_tags_term->getName();
  }

  $variables['video_tags'] = $video_tags;

  // Formatting author info for blog post node.
  if ($node instanceof NodeInterface) {
    if ($node->bundle() == 'profile') {
      // Get author photo.
      if ($author_photo_tid = $node->get('field_profile_photo')
        ->getValue()[0]['target_id']) {
        if (!empty($author_photo_tid)) {
          $author_photo = File::load($author_photo_tid);
          $image_uri = $author_photo->getFileUri();

          $variables['author_photo_uri'] = $image_uri;
        }
      }

      $variables['author_name'] = $node->getTitle();
      if (!$node->get('body')->isEmpty()) {
        $variables['author_bio'] = $node->get('body')->getValue()[0]['value'];
      }
    }
  }

  // Build menu news tags.
  // News tags ids.
  $menu_news_tags_ids = [
    'political' => [
      'id' => '1386',
      'label' => 'Political'
    ],
    'worlds' => [
      'id' => '1382',
      'label' => 'Worlds'
    ],
    'economical' => [
      'id' => '1396',
      'label' => 'Economical'
    ],
    'cultural' => [
      'id' => '1400',
      'label' => 'Cultural',
    ],
    'social' => [
      'uk' => [
        'id' => '1390',
      ],
      'ru' => [
        'id' => '1391',
      ],
      'label' => 'Social',
    ],
    'media' => [
      'id' => '1436',
      'label' => 'Media',
    ],
    'events' => [
      'uk' => [
        'id' => '1437',
      ],
      'ru' => [
        'id' => '1438',
      ],
      'label' => 'Events',
    ],
  ];

  // Build array with news tags.
  $menu_news_tags = [];
  foreach ($menu_news_tags_ids as $menu_news_tag_key => $menu_news_tag) {
    if (isset($menu_news_tag['uk']) && isset($menu_news_tag['ru'])) {
      if ($path_alias_repository->lookupBySystemPath('/taxonomy/term/' . $menu_news_tag[$langcode]['id'], $langcode)) {
        $menu_news_tags[$menu_news_tag_key]['label'] = t($menu_news_tag['label']);
        $menu_news_tags[$menu_news_tag_key]['url'] = $url_langcode . $alias_manager->getAliasByPath('/taxonomy/term/' . $menu_news_tag[$langcode]['id']);
      }
    }
    else {
      if ($path_alias_repository->lookupBySystemPath('/taxonomy/term/' . $menu_news_tag['id'], $langcode)) {
        $menu_news_tags[$menu_news_tag_key]['label'] = t($menu_news_tag['label']);
        $menu_news_tags[$menu_news_tag_key]['url'] = $url_langcode . $alias_manager->getAliasByPath('/taxonomy/term/' . $menu_news_tag['id']);
      }
    }
  }

  // Pass $menu_news_tags var to templates.
  $variables['menu_news_tags'] = $menu_news_tags;

  // Build menu newspaper tags.
  // Newspaper tags ids.
  $menu_newspaper_tags_ids = [
    'day_of_ukraine' => [
      'ua' => [
        'id' => '1445',
        'label' => 'Day of Ukraine',
      ],
      'ru' => [
        'id' => '1446',
        'label' => 'Day of Ukraine',
      ]
    ],
    'day_of_planet' => [
      'ua' => [
        'id' => '1455',
        'label' => 'Day of planet',
      ],
      'ru' => [
        'id' => '1454',
        'label' => 'Day of planet',
      ],
    ],
    'politics' => [
      'ua' => [
        'id' => '1565',
        'label' => 'Politics',
      ],
      'ru' => [
        'id' => '1566',
        'label' => 'Politics',
      ],
    ],
    'economics' => [
      'ua' => [
        'id' => '1422',
        'label' => 'Economics',
      ],
      'ru' => [
        'id' => '1423',
        'label' => 'Economics',
      ],
    ],
    'social' => [
      'ua' => [
        'id' => '1426',
        'label' => 'Social',
      ],
      'ru' => [
        'id' => '1427',
        'label' => 'Social',
      ],
    ],
    'culture' => [
      'ua' => [
        'id' => '1416',
        'label' => 'Culture',
      ],
      'ru' => [
        'id' => '1415',
        'label' => 'Culture',
      ],
    ],
    'media' => [
      'ua' => [
        'id' => '1419',
        'label' => 'Media',
      ],
      'ru' => [
        'id' => '1420',
        'label' => 'Media',
      ],
    ],
    'ukraine_incognita' => [
      'ua' => [
        'id' => '1424',
        'label' => 'Ukraine Incognita',
      ],
      'ru' => [
        'id' => '1425',
        'label' => 'Ukraine Incognita',
      ],
    ],
    'time_out' => [
      'ua' => [
        'id' => '1439',
        'label' => 'Time-out',
      ],
      'ru' => [
        'id' => '1441',
        'label' => 'Time-out',
      ],
    ],
    'top_net' => [
      'ua' => [
        'id' => '2058',
        'label' => 'Top-Net',
      ],
      'ru' => [
        'id' => '2059',
        'label' => 'Top-Net',
      ],
    ],
    'travels' => [
      'ua' => [
        'id' => '1521',
        'label' => 'Travels',
      ],
      'ru' => [
        'id' => '1522',
        'label' => 'Travels',
      ],
    ],
    'ukrainians_read' => [
      'ua' => [
        'id' => '1417',
        'label' => 'Ukrainians - read!',
      ],
      'ru' => [
        'id' => '1418',
        'label' => 'Ukrainians - read!',
      ],
    ],
  ];

  // Build array with newspaper tags.
  $menu_newspaper_tags = [];
  foreach ($menu_newspaper_tags_ids as $menu_newspaper_tag_key => $menu_newspaper_tag) {
    foreach ($menu_newspaper_tag as $menu_newspaper_tag_value) {
      if ($path_alias_repository->lookupBySystemPath('/taxonomy/term/' . $menu_newspaper_tag_value['id'], $langcode)) {
        $menu_newspaper_tags[$menu_newspaper_tag_key]['label'] = t($menu_newspaper_tag_value['label']);
        $menu_newspaper_tags[$menu_newspaper_tag_key]['url'] = $url_langcode . $alias_manager->getAliasByPath('/taxonomy/term/' . $menu_newspaper_tag_value['id']);
      }
//    elseif ($menu_newspaper_tag_key == 'ukraine_incognita') {
//      $menu_newspaper_tags[$menu_newspaper_tag_key]['label'] = t($menu_newspaper_tag['label']);
//      $menu_newspaper_tags[$menu_newspaper_tag_key]['url'] = 'http://incognita.day.kyiv.ua';
//    }
    }
  }

  // Pass $menu_newspaper_tags var to templates.
  $variables['menu_newspaper_tags'] = $menu_newspaper_tags;

  // Build

  // Pass view search exposed filter form.
  //  $view_id = 'search_via_search_api';
  //  $view_display_id = 'page_1';
  //
  //  $view = Views::getView($view_id);
  //
  //  if ($view->id() == $view_id) {
  //    $view->setDisplay($view_display_id);
  //    $view->initHandlers();
  //    $form_state = new FormState();
  //    $form_state->setFormState([
  //      'view' => $view,
  //      'display' => $view->display_handler->display,
  //      'exposed_form_plugin' => $view->display_handler->getPlugin('exposed_form'),
  //      'method' => 'get',
  //      'rerender' => TRUE,
  //      'no_redirect' => TRUE,
  //      'always_process' => TRUE, // This is important for handle the form status.
  //    ]);

  //    $variables['search_form'] = \Drupal::formBuilder()->buildForm('Drupal\views\Form\ViewsExposedForm', $form_state);
  //  }
}

/**
 * Implements hook_preprocess_node.
 */
function day_theme_preprocess_node(&$variables) {
  // Get langcode.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  /** @var Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  /** @var Drupal\taxonomy\TermStorageInterface $taxonomy_storage */
  $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  /** @var Drupal\node\NodeStorageInterface $node_storage */
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');

  $content_types = [
    'field_tag_news' => [
      'news',
      'openpublish_article',
      'openpublish_blog_post'
    ],
    'field_video_tags' => [
      'openpublish_video'
    ]
  ];

  foreach ($content_types as $field => $content_type) {
    if (in_array($node->bundle(), $content_type)) {

      // Load taxonomy term node tags.
      if ($node->hasField($field)) {
        $field_tags = $node->get($field)->getValue();

        if (!empty($field_tags)) {

          $tag_ids = [];
          foreach ($field_tags as $field_tag) {
            $tag_ids[] = $field_tag['target_id'];
          }

          $tag_terms = $taxonomy_storage->loadMultiple($tag_ids);

          $tag_term_links = [];
          foreach ($tag_terms as $tag_news_term) {
            $tag_term_links[] = Link::createFromRoute($tag_news_term->getName(), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $tag_news_term->id()]);
          }

          // Pass tags to variables.
          $variables['tags'] = $tag_term_links;

        }
      }
    }
  }

  // Formatting author info for blog post node.
  if ($node->bundle() == 'openpublish_blog_post') {
    if ($node->hasField('field_op_author')) {
      $author_nid = $node->get('field_op_author')->getValue()[0]['target_id'];

      $author_node = $node_storage->load($author_nid);

      if ($author_node) {

        // Get author photo.
        if ($author_photo_tid = $author_node->get('field_profile_photo')
          ->getValue()[0]['target_id']) {
          $image_style = ImageStyle::load('85x85');

          if (!empty($author_photo_tid)) {
            $author_photo = File::load($author_photo_tid);
            $image_url = $image_style->buildUrl($author_photo->uri->value);

            $variables['author_photo_url'] = $image_url;
          }
        }

        $variables['author_name'] = $author_node->getTitle();
        $variables['author_url'] = \Drupal::service('path_alias.manager')
          ->getAliasByPath('/node/' . $author_node->id());
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view_grouping.
 */

function day_theme_preprocess_views_view_grouping(&$variables) {
  // Add current langcode to templates.
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['language'] = $language;
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function day_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  /** @var Drupal\taxonomy\TermStorageInterface $taxonomy_storage */
  $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle() . '_type';
  }

  if (\Drupal::routeMatch()
      ->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()
      ->getRawParameter('taxonomy_term')) {
    $term = $taxonomy_storage->load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 *
 * @param array $suggestions
 * @param array $variables
 * @return void
 */
function day_theme_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#type']) && isset($variables['element']['#name']) && isset($variables['element']['#display_id'])) {
    $suggestions[] = 'container__' . $variables['element']['#type'] . '__' . $variables['element']['#name'] . '__' . $variables['element']['#display_id'];
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 *
 * @param $variables
 * @return void
 */
function day_theme_preprocess_views_view_unformatted(&$variables) {
  // Get filter query parameter.
  if (isset($_GET['filter'])) {
    $variables['search_filter_parameter'] = $_GET['filter'];
  }
}
